import { Directive, EventEmitter, Inject, Injectable, InjectionToken, Input, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/first';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeAll';
import 'rxjs/add/observable/merge';
import 'rxjs/add/observable/from';
import 'rxjs/add/observable/combineLatest';
import 'rxjs/add/operator/skip';
import { Router } from '@angular/router';
import 'rxjs/add/observable/forkJoin';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/map';

var NgxPermissionsStore = /** @class */ (function () {
    function NgxPermissionsStore() {
        this.permissionsSource = new BehaviorSubject({});
        this.permissions$ = this.permissionsSource.asObservable();
    }
    NgxPermissionsStore.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    NgxPermissionsStore.ctorParameters = function () { return []; };
    return NgxPermissionsStore;
}());

/**
 * @param {?} functionToCheck
 * @return {?}
 */
function isFunction(functionToCheck) {
    var /** @type {?} */ getType = {};
    return !!functionToCheck && functionToCheck instanceof Function && getType.toString.call(functionToCheck) === '[object Function]';
}
/**
 * @param {?} value
 * @return {?}
 */
function isPlainObject(value) {
    if (Object.prototype.toString.call(value) !== '[object Object]') {
        return false;
    }
    else {
        var /** @type {?} */ prototype = Object.getPrototypeOf(value);
        return prototype === null || prototype === Object.prototype;
    }
}
/**
 * @param {?} value
 * @return {?}
 */
function isString(value) {
    return typeof value === 'string';
}
/**
 * @param {?} promise
 * @return {?}
 */
function isPromise(promise) {
    return Object.prototype.toString.call(promise) === "[object Promise]";
}
/**
 * @param {?} value
 * @return {?}
 */
function notEmptyValue(value) {
    if (Array.isArray(value)) {
        return value.length > 0;
    }
    return !!value;
}

var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var USE_PERMISSIONS_STORE = new InjectionToken('USE_PERMISSIONS_STORE');
var NgxPermissionsService = /** @class */ (function () {
    /**
     * @param {?=} isolate
     * @param {?=} permissionsStore
     */
    function NgxPermissionsService(isolate, permissionsStore) {
        if (isolate === void 0) { isolate = false; }
        this.isolate = isolate;
        this.permissionsStore = permissionsStore;
        this.permissionsSource = this.isolate ? new BehaviorSubject({}) : this.permissionsStore.permissionsSource;
        this.permissions$ = this.permissionsSource.asObservable();
    }
    /**
     * @return {?}
     */
    NgxPermissionsService.prototype.flushPermissions = function () {
        this.permissionsSource.next({});
    };
    /**
     * @param {?} permission
     * @return {?}
     */
    NgxPermissionsService.prototype.hasPermission = function (permission) {
        if (!permission || (Array.isArray(permission) && permission.length === 0)) {
            return Promise.resolve(true);
        }
        
        if (Array.isArray(permission)) {
            return this.hasArrayPermission(permission);
        }
        else {
            permission = [permission];
            return this.hasArrayPermission(permission);
        }
    };
    /**
     * @param {?} permissions
     * @param {?=} validationFunction
     * @return {?}
     */
    NgxPermissionsService.prototype.loadPermissions = function (permissions, validationFunction) {
        var _this = this;
        permissions.forEach(function (p) {
            _this.addPermissionToBehaviorSubject(p, validationFunction);
        });
    };
    /**
     * @param {?} permission
     * @param {?=} validationFunction
     * @return {?}
     */
    NgxPermissionsService.prototype.addPermission = function (permission, validationFunction) {
        var _this = this;
        if (Array.isArray(permission)) {
            permission.forEach(function (p) {
                _this.addPermissionToBehaviorSubject(p, validationFunction);
            });
        }
        else {
            this.addPermissionToBehaviorSubject(permission, validationFunction);
        }
    };
    /**
     * @param {?} permissionName
     * @return {?}
     */
    NgxPermissionsService.prototype.removePermission = function (permissionName) {
        var /** @type {?} */ permissions = __assign({}, this.permissionsSource.value);
        delete permissions[permissionName];
        this.permissionsSource.next(permissions);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    NgxPermissionsService.prototype.getPermission = function (name) {
        return this.permissionsSource.value[name];
    };
    /**
     * @return {?}
     */
    NgxPermissionsService.prototype.getPermissions = function () {
        return this.permissionsSource.value;
    };
    /**
     * @param {?} name
     * @param {?=} validationFunction
     * @return {?}
     */
    NgxPermissionsService.prototype.addPermissionToBehaviorSubject = function (name, validationFunction) {
        if (!!validationFunction && isFunction(validationFunction)) {
            var /** @type {?} */ roles = __assign({}, this.permissionsSource.value, (_a = {}, _a[name] = { name: name, validationFunction: validationFunction }, _a));
            this.permissionsSource.next(roles);
        }
        else {
            var /** @type {?} */ roles = __assign({}, this.permissionsSource.value, (_b = {}, _b[name] = { name: name }, _b));
            this.permissionsSource.next(roles);
        }
        var _a, _b;
    };
    /**
     * @param {?} permissions
     * @return {?}
     */
    NgxPermissionsService.prototype.hasArrayPermission = function (permissions) {
        var _this = this;
        var /** @type {?} */ promises = [];
        permissions.forEach(function (key) {
            if (_this.hasPermissionValidationFunction(key)) {
                var /** @type {?} */ immutableValue = __assign({}, _this.permissionsSource.value);
                return promises.push(Observable.from(Promise.resolve(((_this.permissionsSource.value[key].validationFunction))(key, immutableValue))).catch(function () {
                    return Observable.of(false);
                }));
            }
            else {
                //check for name of the permission if there is no validation function
                promises.push(Observable.of(!!_this.permissionsSource.value[key]));
            }
        });
        return Observable.merge(promises)
            .mergeAll()
            .first(function (data) {
            return data !== false;
        }, function () { return true; }, false)
            .toPromise()
            .then(function (data) {
            return data;
        });
    };
    /**
     * @param {?} key
     * @return {?}
     */
    NgxPermissionsService.prototype.hasPermissionValidationFunction = function (key) {
        return !!this.permissionsSource.value[key] && !!this.permissionsSource.value[key].validationFunction && isFunction(this.permissionsSource.value[key].validationFunction);
    };
    NgxPermissionsService.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    NgxPermissionsService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [USE_PERMISSIONS_STORE,] },] },
        { type: NgxPermissionsStore, },
    ]; };
    return NgxPermissionsService;
}());

var NgxRolesStore = /** @class */ (function () {
    function NgxRolesStore() {
        this.rolesSource = new BehaviorSubject({});
        this.roles$ = this.rolesSource.asObservable();
    }
    return NgxRolesStore;
}());

var __assign$1 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');
var NgxRolesService = /** @class */ (function () {
    /**
     * @param {?=} isolate
     * @param {?=} rolesStore
     */
    function NgxRolesService(isolate, rolesStore) {
        if (isolate === void 0) { isolate = false; }
        this.isolate = isolate;
        this.rolesStore = rolesStore;
        this.rolesSource = this.isolate ? new BehaviorSubject({}) : this.rolesStore.rolesSource;
        this.roles$ = this.rolesSource.asObservable();
    }
    /**
     * @param {?} name
     * @param {?} validationFunction
     * @return {?}
     */
    NgxRolesService.prototype.addRole = function (name, validationFunction) {
        var /** @type {?} */ roles = __assign$1({}, this.rolesSource.value, (_a = {}, _a[name] = { name: name, validationFunction: validationFunction }, _a));
        this.rolesSource.next(roles);
        var _a;
    };
    /**
     * @param {?} rolesObj
     * @return {?}
     */
    NgxRolesService.prototype.addRoles = function (rolesObj) {
        var _this = this;
        Object.keys(rolesObj).forEach(function (key, index) {
            _this.addRole(key, rolesObj[key]);
        });
    };
    /**
     * @return {?}
     */
    NgxRolesService.prototype.flushRoles = function () {
        this.rolesSource.next({});
    };
    /**
     * @param {?} roleName
     * @return {?}
     */
    NgxRolesService.prototype.removeRole = function (roleName) {
        var /** @type {?} */ roles = __assign$1({}, this.rolesSource.value);
        delete roles[roleName];
        this.rolesSource.next(roles);
    };
    /**
     * @return {?}
     */
    NgxRolesService.prototype.getRoles = function () {
        return this.rolesSource.value;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    NgxRolesService.prototype.getRole = function (name) {
        return this.rolesSource.value[name];
    };
    /**
     * @param {?} names
     * @return {?}
     */
    NgxRolesService.prototype.hasOnlyRoles = function (names) {
        if (!names || (Array.isArray(names) && names.length === 0)) {
            return Promise.resolve(true);
        }
        return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])
            .then(function (_a) {
            var hasRoles = _a[0], hasPermissions = _a[1];
            return hasRoles || hasPermissions;
        });
    };
    /**
     * @param {?} roleName
     * @return {?}
     */
    NgxRolesService.prototype.hasRoleKey = function (roleName) {
        var _this = this;
        if (Array.isArray(roleName)) {
            var /** @type {?} */ promises_1 = [];
            roleName.forEach(function (key) {
                if (!!_this.rolesSource.value[key] && !!_this.rolesSource.value[key].validationFunction && isFunction(_this.rolesSource.value[key].validationFunction) && !isPromise(_this.rolesSource.value[key].validationFunction)) {
                    return promises_1.push(Observable.from(Promise.resolve(((_this.rolesSource.value[key].validationFunction))())).catch(function () {
                        return Observable.of(false);
                    }));
                }
                promises_1.push(Observable.of(!!_this.rolesSource.value[key]));
            });
            return Observable.merge(promises_1).mergeAll().first(function (data) {
                return data !== false;
            }, function () { return true; }, false).toPromise().then(function (data) {
                return data;
            });
            // return Promise.resolve(Object.keys(this.rolesSource.value).some((key) => {
            //     return roleName.includes(key)
            // }));
        }
        else {
            if (!!this.rolesSource.value[roleName] && !!this.rolesSource.value[roleName].validationFunction && isFunction(this.rolesSource.value[roleName].validationFunction)) {
                return Promise.resolve((((this.rolesSource.value[roleName].validationFunction))())).then(function (data) {
                    if (data !== false) {
                        return true;
                    }
                    else {
                        return data;
                    }
                });
            }
            return Promise.resolve(!!this.rolesSource.value[roleName]);
        }
    };
    /**
     * @param {?} roles
     * @param {?} roleName
     * @return {?}
     */
    NgxRolesService.prototype.hasRolePermission = function (roles, roleName) {
        return Promise.resolve(Object.keys(roles).some(function (key) {
            if (Array.isArray(roles[key].validationFunction)) {
                if (isString(roleName)) {
                    return ((roles[key].validationFunction)).includes(/** @type {?} */ (roleName));
                }
                else {
                    return ((roles[key].validationFunction)).some(function (v) {
                        return roleName.includes(v);
                    });
                }
            }
            return false;
        }));
    };
    NgxRolesService.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    NgxRolesService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [USE_ROLES_STORE,] },] },
        { type: NgxRolesStore, },
    ]; };
    return NgxRolesService;
}());

var NgxPermissionsDirective = /** @class */ (function () {
    /**
     * @param {?} permissionsService
     * @param {?} rolesService
     * @param {?} viewContainer
     * @param {?} templateRef
     */
    function NgxPermissionsDirective(permissionsService, rolesService, viewContainer, templateRef) {
        this.permissionsService = permissionsService;
        this.rolesService = rolesService;
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
        this.permissionsAuthorized = new EventEmitter();
        this.permissionsUnauthorized = new EventEmitter();
        this.firstMergeUnusedRun = 1;
    }
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.ngOnInit = function () {
        this.initPermissionSubscription = this.validateExceptOnlyPermissions();
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.ngOnDestroy = function () {
        if (!!this.initPermissionSubscription) {
            this.initPermissionSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.validateExceptOnlyPermissions = function () {
        var _this = this;
        return Observable.merge(this.permissionsService.permissions$, this.rolesService.roles$)
            .skip(this.firstMergeUnusedRun)
            .subscribe(function () {
            if (notEmptyValue(_this.ngxPermissionsExcept)) {
                _this.validateExceptAndOnlyPermissions();
                return;
            }
            if (notEmptyValue(_this.ngxPermissionsOnly)) {
                _this.validateOnlyPermissions();
            }
            _this.handleAuthorisedPermission(_this.getAuthorisedTemplates());
        });
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.validateExceptAndOnlyPermissions = function () {
        var _this = this;
        Promise.all([this.permissionsService.hasPermission(this.ngxPermissionsExcept), this.rolesService.hasOnlyRoles(this.ngxPermissionsExcept)])
            .then(function (_a) {
            var hasPermission = _a[0], hasRole = _a[1];
            if (hasPermission || hasRole) {
                _this.handleUnauthorisedPermission(_this.ngxPermissionsExceptElse || _this.ngxPermissionsElse);
            }
            else {
                if (!!_this.ngxPermissionsOnly) {
                    throw false;
                }
                else {
                    _this.handleAuthorisedPermission(_this.ngxPermissionsExceptThen || _this.ngxPermissionsThen || _this.templateRef);
                }
            }
        }).catch(function () {
            if (!!_this.ngxPermissionsOnly) {
                _this.validateOnlyPermissions();
            }
            else {
                _this.handleAuthorisedPermission(_this.ngxPermissionsExceptThen || _this.ngxPermissionsThen || _this.templateRef);
            }
        });
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.validateOnlyPermissions = function () {
        var _this = this;
        Promise.all([this.permissionsService.hasPermission(this.ngxPermissionsOnly), this.rolesService.hasOnlyRoles(this.ngxPermissionsOnly)])
            .then(function (_a) {
            var permissionPr = _a[0], roles = _a[1];
            if (permissionPr || roles) {
                _this.handleAuthorisedPermission(_this.ngxPermissionsOnlyThen || _this.ngxPermissionsThen || _this.templateRef);
            }
            else {
                _this.handleUnauthorisedPermission(_this.ngxPermissionsOnlyElse || _this.ngxPermissionsElse);
            }
        }).catch(function () {
            _this.handleUnauthorisedPermission(_this.ngxPermissionsOnlyElse || _this.ngxPermissionsElse);
        });
    };
    /**
     * @param {?} template
     * @return {?}
     */
    NgxPermissionsDirective.prototype.handleUnauthorisedPermission = function (template) {
        this.permissionsUnauthorized.emit();
        this.viewContainer.clear();
        this.showTemplateBlockInView(template);
    };
    /**
     * @param {?} template
     * @return {?}
     */
    NgxPermissionsDirective.prototype.handleAuthorisedPermission = function (template) {
        this.permissionsAuthorized.emit();
        this.viewContainer.clear();
        this.showTemplateBlockInView(template);
    };
    /**
     * @param {?} template
     * @return {?}
     */
    NgxPermissionsDirective.prototype.showTemplateBlockInView = function (template) {
        if (!template)
            return;
        this.viewContainer.createEmbeddedView(template);
    };
    /**
     * @return {?}
     */
    NgxPermissionsDirective.prototype.getAuthorisedTemplates = function () {
        return this.ngxPermissionsOnlyThen
            || this.ngxPermissionsExceptThen
            || this.ngxPermissionsThen
            || this.templateRef;
    };
    NgxPermissionsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'
                },] },
    ];
    /**
     * @nocollapse
     */
    NgxPermissionsDirective.ctorParameters = function () { return [
        { type: NgxPermissionsService, },
        { type: NgxRolesService, },
        { type: ViewContainerRef, },
        { type: TemplateRef, },
    ]; };
    NgxPermissionsDirective.propDecorators = {
        'ngxPermissionsOnly': [{ type: Input },],
        'ngxPermissionsOnlyThen': [{ type: Input },],
        'ngxPermissionsOnlyElse': [{ type: Input },],
        'ngxPermissionsExcept': [{ type: Input },],
        'ngxPermissionsExceptElse': [{ type: Input },],
        'ngxPermissionsExceptThen': [{ type: Input },],
        'ngxPermissionsThen': [{ type: Input },],
        'ngxPermissionsElse': [{ type: Input },],
        'permissionsAuthorized': [{ type: Output },],
        'permissionsUnauthorized': [{ type: Output },],
    };
    return NgxPermissionsDirective;
}());

var __assign$2 = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var NgxPermissionsGuard = /** @class */ (function () {
    /**
     * @param {?} permissionsService
     * @param {?} rolesService
     * @param {?} router
     */
    function NgxPermissionsGuard(permissionsService, rolesService, router) {
        this.permissionsService = permissionsService;
        this.rolesService = rolesService;
        this.router = router;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.canActivate = function (route, state) {
        return this.hasPermissions(route, state);
    };
    /**
     * @param {?} childRoute
     * @param {?} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.canActivateChild = function (childRoute, state) {
        return this.hasPermissions(childRoute, state);
    };
    /**
     * @param {?} route
     * @return {?}
     */
    NgxPermissionsGuard.prototype.canLoad = function (route) {
        return this.hasPermissions(route);
    };
    /**
     * @param {?} purePermissions
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.checkOnlyPermissions = function (purePermissions, route, state) {
        var _this = this;
        var /** @type {?} */ permissions = __assign$2({}, purePermissions);
        return Promise.all([this.permissionsService.hasPermission(/** @type {?} */ (permissions.only)), this.rolesService.hasOnlyRoles(/** @type {?} */ (permissions.only))])
            .then(function (_a) {
            var permissionsPr = _a[0], roles = _a[1];
            if (permissionsPr || roles) {
                return true;
            }
            else {
                if (permissions.redirectTo) {
                    _this.redirectToAnotherRoute(permissions.redirectTo, route, state);
                    return false;
                }
                else {
                    return false;
                }
            }
        });
    };
    /**
     * @param {?} redirectTo
     * @param {?} route
     * @param {?=} state
     * @param {?=} failedPermissionName
     * @return {?}
     */
    NgxPermissionsGuard.prototype.redirectToAnotherRoute = function (redirectTo, route, state, failedPermissionName) {
        if (isFunction(redirectTo)) {
            redirectTo = ((redirectTo))(failedPermissionName, route, state);
        }
        if (this.isRedirectionWithParameters(redirectTo)) {
            if (this.hasNavigationExtrasAsFunction(redirectTo)) {
                ((redirectTo)).navigationExtras = ((((redirectTo)).navigationExtras))(route, state);
            }
            if (this.hasNavigationCommandsAsFunction(redirectTo)) {
                ((redirectTo)).navigationCommands = ((((redirectTo)).navigationCommands))(route, state);
            }
            this.router.navigate(((((redirectTo)).navigationCommands)), ((((redirectTo)).navigationExtras)));
            return;
        }
        if (Array.isArray(redirectTo)) {
            this.router.navigate(redirectTo);
            this.router.navigate(redirectTo);
        }
        else {
            this.router.navigate([redirectTo]);
        }
    };
    /**
     * @param {?} object
     * @return {?}
     */
    NgxPermissionsGuard.prototype.isRedirectionWithParameters = function (object) {
        return isPlainObject(object) && (!!object.navigationCommands || !!object.navigationExtras);
    };
    /**
     * @param {?} redirectTo
     * @return {?}
     */
    NgxPermissionsGuard.prototype.hasNavigationExtrasAsFunction = function (redirectTo) {
        return !!((redirectTo)).navigationExtras && isFunction(((redirectTo)).navigationExtras);
    };
    /**
     * @param {?} redirectTo
     * @return {?}
     */
    NgxPermissionsGuard.prototype.hasNavigationCommandsAsFunction = function (redirectTo) {
        return !!((redirectTo)).navigationCommands && isFunction(((redirectTo)).navigationCommands);
    };
    /**
     * @param {?} permissions
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.onlyRedirectCheck = function (permissions, route, state) {
        var _this = this;
        var /** @type {?} */ failedPermission = '';
        return Observable.from(permissions.only)
            .mergeMap(function (data) {
            return Observable.forkJoin([_this.permissionsService.hasPermission(/** @type {?} */ (data)), _this.rolesService.hasOnlyRoles(/** @type {?} */ (data))])
                .do(function (hasPerm) {
                var /** @type {?} */ failed = hasPerm.every(function (data) {
                    return data === false;
                });
                if (failed) {
                    failedPermission = data;
                }
            });
        })
            .first(function (data) {
            return data.every(function (data) {
                return data === false;
            });
        }, function () { return true; }, false)
            .mergeMap(function (isAllFalse) {
            if (!!failedPermission) {
                _this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);
            }
            return Observable.of(!isAllFalse);
        }).toPromise();
    };
    /**
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.hasPermissions = function (route, state) {
        var _this = this;
        var /** @type {?} */ purePermissions = !!route && route.data ? (route.data['permissions']) : {};
        var /** @type {?} */ permissions = __assign$2({}, purePermissions);
        if (isFunction(permissions.except)) {
            permissions.except = ((purePermissions.except))(route, state);
        }
        if (isFunction(permissions.only)) {
            permissions.only = ((purePermissions.only))(route, state);
        }
        if (!!permissions.except && isString(permissions.except)) {
            permissions.except = [permissions.except];
        }
        if (!!permissions.only && isString(permissions.only)) {
            permissions.only = [permissions.only];
        }
        if (!!permissions.except && permissions.except.length > 0) {
            if (!!permissions.redirectTo && ((isFunction(permissions.redirectTo)) || (isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo)))) {
                if (Array.isArray(permissions.except)) {
                    var /** @type {?} */ failedPermission_1 = '';
                    return Observable.from(permissions.except)
                        .mergeMap(function (data) {
                        return Observable.forkJoin([_this.permissionsService.hasPermission(/** @type {?} */ (data)), _this.rolesService.hasOnlyRoles(/** @type {?} */ (data))])
                            .do(function (hasPerm) {
                            var /** @type {?} */ dontHavePermissions = hasPerm.every(function (data) {
                                return data === false;
                            });
                            if (!dontHavePermissions) {
                                failedPermission_1 = data;
                            }
                        });
                    }).first(function (data) {
                        return data.some(function (data) {
                            return data === true;
                        });
                    }, function () { return true; }, false).mergeMap(function (isAllFalse) {
                        if (!!failedPermission_1) {
                            _this.handleRedirectOfFailedPermission(permissions, failedPermission_1, route, state);
                            return Observable.of(false);
                        }
                        if (!isAllFalse && permissions.only) {
                            return _this.onlyRedirectCheck(permissions, route, state);
                        }
                        return Observable.of(!isAllFalse);
                    }).toPromise();
                }
            }
            return Promise.all([this.permissionsService.hasPermission(/** @type {?} */ (permissions.except)), this.rolesService.hasOnlyRoles(/** @type {?} */ (permissions.except))])
                .then(function (_a) {
                var permissionsPr = _a[0], roles = _a[1];
                if (permissionsPr || roles) {
                    if (permissions.redirectTo) {
                        _this.redirectToAnotherRoute(permissions.redirectTo, route, state);
                        return false;
                    }
                    else {
                        return false;
                    }
                }
                else {
                    if (permissions.only) {
                        return _this.checkOnlyPermissions(permissions, route, state);
                    }
                    return true;
                }
            });
        }
        if (permissions.only && permissions.only.length > 0) {
            if (!!permissions.only && (isFunction(permissions.redirectTo) || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))) {
                return this.onlyRedirectCheck(permissions, route, state);
            }
            return this.checkOnlyPermissions(permissions, route, state);
        }
        return true;
    };
    /**
     * @param {?} permissions
     * @param {?} failedPermission
     * @param {?} route
     * @param {?=} state
     * @return {?}
     */
    NgxPermissionsGuard.prototype.handleRedirectOfFailedPermission = function (permissions, failedPermission, route, state) {
        if (this.isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission)) {
            this.redirectToAnotherRoute(((permissions.redirectTo))[failedPermission], route, state, failedPermission);
        }
        else {
            if (isFunction(permissions.redirectTo)) {
                this.redirectToAnotherRoute(((permissions.redirectTo)), route, state, failedPermission);
            }
            else {
                this.redirectToAnotherRoute(((permissions.redirectTo))['default'], route, state, failedPermission);
            }
        }
    };
    /**
     * @param {?} permissions
     * @param {?} failedPermission
     * @return {?}
     */
    NgxPermissionsGuard.prototype.isFailedPermissionPropertyOfRedirectTo = function (permissions, failedPermission) {
        return !!permissions.redirectTo && permissions.redirectTo[(failedPermission)];
    };
    NgxPermissionsGuard.decorators = [
        { type: Injectable },
    ];
    /**
     * @nocollapse
     */
    NgxPermissionsGuard.ctorParameters = function () { return [
        { type: NgxPermissionsService, },
        { type: NgxRolesService, },
        { type: Router, },
    ]; };
    return NgxPermissionsGuard;
}());

var NgxRole = /** @class */ (function () {
    /**
     * @param {?} name
     * @param {?} validationFunction
     */
    function NgxRole(name, validationFunction) {
        this.name = name;
        this.validationFunction = validationFunction;
    }
    return NgxRole;
}());

var NgxPermissionsModule = /** @class */ (function () {
    function NgxPermissionsModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    NgxPermissionsModule.forRoot = function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: NgxPermissionsModule,
            providers: [
                NgxPermissionsStore,
                NgxRolesStore,
                NgxPermissionsService,
                NgxPermissionsGuard,
                NgxRolesService,
                { provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate },
                { provide: USE_ROLES_STORE, useValue: config.rolesIsolate },
            ]
        };
    };
    /**
     * @param {?=} config
     * @return {?}
     */
    NgxPermissionsModule.forChild = function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: NgxPermissionsModule,
            providers: [
                { provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate },
                { provide: USE_ROLES_STORE, useValue: config.rolesIsolate },
                NgxPermissionsService,
                NgxRolesService,
                NgxPermissionsGuard
            ]
        };
    };
    NgxPermissionsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        NgxPermissionsDirective
                    ],
                    exports: [
                        NgxPermissionsDirective
                    ]
                },] },
    ];
    /**
     * @nocollapse
     */
    NgxPermissionsModule.ctorParameters = function () { return []; };
    return NgxPermissionsModule;
}());

export { NgxPermissionsModule, NgxRolesStore, NgxPermissionsStore, NgxPermissionsDirective, USE_PERMISSIONS_STORE, NgxPermissionsService, USE_ROLES_STORE, NgxRolesService, NgxPermissionsGuard, NgxRole };
